{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","TodoItemBlock","CheckCircle","props","css","Text","React","memo","onClick","TodoListBlock","TodoList","todos","key","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","useState","setOpen","setValue","onSubmit","e","preventDefault","current","autoFocus","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kkBAOA,IAAMA,EAAoBC,IAAOC,IAAV,KAqBRC,MAJf,YAAoC,IAAZC,EAAW,EAAXA,SACpB,OAAO,kBAACJ,EAAD,KAAqBI,I,cCvB1BC,EAAe,CACjB,CACIC,GAAI,EACJC,KAAM,wCACNC,MAAM,GAEV,CACIF,GAAI,EACJC,KAAM,8CACNC,MAAM,GAEV,CACIF,GAAI,EACJC,KAAM,2BACNC,MAAM,GAEV,CACIF,GAAI,EACJC,KAAM,2BACNC,MAAM,GAEV,CACIF,GAAI,EACJC,KAAM,2BACNC,MAAM,GAEV,CACIF,GAAI,EACJC,KAAM,kCACNC,MAAM,IAId,SAASC,EAAYC,EAAOC,GACxB,OAAQA,EAAOC,MACX,IAAK,SACD,OAAOF,EAAMG,OAAOF,EAAOG,MAC/B,IAAK,SACD,OAAOJ,EAAMK,KAAI,SAAAD,GAAI,OACjBA,EAAKR,KAAOK,EAAOL,GAAnB,2BAA6BQ,GAA7B,IAAmCN,MAAOM,EAAKN,OAAQM,KAC/D,IAAK,SACD,OAAOJ,EAAMM,QAAO,SAAAF,GAAI,OAAIA,EAAKR,KAAOK,EAAOL,MACnD,QACI,MAAM,IAAIW,MAAJ,UAAaN,EAAOC,QAItC,IAAMM,EAAmBC,0BACnBC,EAAsBD,0BACtBE,EAAoBF,0BAEnB,SAASG,EAAT,GAAoC,IAAZlB,EAAW,EAAXA,SAAW,EACZmB,qBAAWd,EAAaJ,GADZ,mBAC/BK,EAD+B,KACxBc,EADwB,KAEhCC,EAASC,iBAAO,GAEtB,OACI,kBAACR,EAAiBS,SAAlB,CAA2BC,MAAOlB,GAC9B,kBAACU,EAAoBO,SAArB,CAA8BC,MAAOJ,GACjC,kBAACH,EAAkBM,SAAnB,CAA4BC,MAAOH,GAClCrB,KAOV,SAASyB,IACZ,OAAOC,qBAAWZ,GAEf,SAASa,IACZ,OAAOD,qBAAWV,G,khBChEtB,IAAMY,EAAgB/B,IAAOC,IAAV,KA+CJ+B,MAtBf,WACI,IAEMC,EAFQL,IAEYb,QAAO,SAAAF,GAAI,OAAKA,EAAKN,QAEzC2B,EAAQ,IAAIC,KACZC,EAAaF,EAAMG,mBAAmB,QAAS,CACjDC,KAAM,UACNC,MAAO,OACPC,IAAK,YAEHC,EAAUP,EAAMG,mBAAmB,QAAS,CAACK,QAAS,SAE5D,OACI,kBAACX,EAAD,KACI,4BAAMK,GACN,yBAAKO,UAAU,OAAQF,GACvB,yBAAKE,UAAU,cAAf,gBAAgCV,EAAYW,OAA5C,yB,wtCCzCZ,IAAMC,EAAS7C,IAAOC,IAAV,KAaN6C,EAAgB9C,IAAOC,IAAV,IAMT4C,GAMJE,EAAc/C,IAAOC,IAAV,KAWX,SAAA+C,GAAK,OACHA,EAAMzC,MACN0C,YADA,QAOFC,EAAOlD,IAAOC,IAAV,KAIJ,SAAA+C,GAAK,OACHA,EAAMzC,MACN0C,YADA,QAwBOE,UAAMC,MAlBrB,YAAoC,IAAjB/C,EAAgB,EAAhBA,GAAIE,EAAY,EAAZA,KAAMD,EAAM,EAANA,KAEnBiB,EAAWO,IAKjB,OACI,kBAACgB,EAAD,KACI,kBAACC,EAAD,CAAaxC,KAAMA,EAAM8C,QANhB,kBAAM9B,EAAS,CAAEZ,KAAM,SAAUN,SAMGE,GAAQ,kBAAC,IAAD,OACrD,kBAAC2C,EAAD,CAAM3C,KAAMA,GAAOD,GACnB,kBAACuC,EAAD,CAAQQ,QAPC,kBAAM9B,EAAS,CAAEZ,KAAM,SAAUN,SAQtC,kBAAC,IAAD,W,gKCnEhB,IAAMiD,EAAgBtD,IAAOC,IAAV,KAuBJsD,MAhBf,WACI,IAAMC,EAAQ5B,IACd,OACI,kBAAC0B,EAAD,KACKE,EAAM1C,KAAI,SAAAD,GAAI,OACX,kBAAC,EAAD,CACI4C,IAAK5C,EAAKR,GACVA,GAAIQ,EAAKR,GACTC,KAAMO,EAAKP,KACXC,KAAMM,EAAKN,Y,m3DChB/B,IAAMmD,EAAe1D,IAAO2D,OAAV,KA2BZ,SAAAX,GAAK,OACHA,EAAMY,MACFX,YADJ,QAaEY,EAAuB7D,IAAOC,IAAV,KAOpB6D,EAAa9D,IAAO+D,KAAV,KAYVC,EAAQhE,IAAOiE,MAAV,KAqDAd,UAAMC,MA3CjB,WAAsB,IAAD,EACOc,oBAAS,GADhB,mBACVN,EADU,KACJO,EADI,OAESD,mBAAS,IAFlB,mBAEVvC,EAFU,KAEHyC,EAFG,KAIX7C,EAAWO,IACXN,EJTHK,qBAAWT,GI4Bd,OACI,oCACKwC,GACG,kBAACC,EAAD,KACI,kBAACC,EAAD,CAAYO,SAnBX,SAAAC,GACbA,EAAEC,iBACFhD,EAAS,CACLZ,KAAM,SACNE,KAAM,CACFR,GAAImB,EAAOgD,QACXlE,KAAMqB,EACNpB,MAAM,KAGd6D,EAAS,IACTD,GAAQ,GACR3C,EAAOgD,SAAW,IAQF,kBAACR,EAAD,CAAOS,WAAS,EAACC,YAAY,iFAC7BC,SAtBH,SAAAL,GAAC,OAAIF,EAASE,EAAEM,OAAOjD,QAuBpBA,MAAOA,MAKnB,kBAAC+B,EAAD,CAAcL,QA7BL,kBAAMc,GAASP,IA6BSA,KAAMA,GACnC,kBAAC,IAAD,W,gHC5GpB,IAAMiB,EAAcC,YAAH,KAqBFC,MAff,WACE,OACE,oCACE,kBAAC1D,EAAD,KACA,kBAACwD,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCVYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b793ce9d.chunk.js","sourcesContent":["/*\r\n    TodoTemplate.js\r\n    레이아웃을 설정하는 컴포넌트\r\n*/\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width: 512px;\r\n    height: 768px;\r\n\r\n    position: relative;\r\n    background: white;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n\r\n    margin: 0 auto;\r\n\r\n    margin-top: 96px;\r\n    margin-bottom: 32px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }){\r\n    return <TodoTemplateBlock>{ children }</TodoTemplateBlock>;\r\n}\r\n\r\nexport default TodoTemplate;\r\n\r\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n    {\r\n        id: 1,\r\n        text: '일찍 일어나기',\r\n        done: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: '아침밥 챙겨먹기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: '명상하기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: '새차하기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 5,\r\n        text: '일기쓰기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 6,\r\n        text: '일찍 잠들기',\r\n        done: false\r\n    }\r\n];\r\n\r\nfunction todoReducer(state, action){\r\n    switch (action.type){\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n        case 'TOGGLE':\r\n            return state.map(todo => \r\n                todo.id === action.id ? { ...todo, done: !todo.done} : todo);\r\n        case 'REMOVE':\r\n            return state.filter(todo => todo.id !== action.id);\r\n        default:\r\n            throw new Error(`${action.type}`);\r\n    }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider( {children} ){\r\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n    const nextId = useRef(7);\r\n\r\n    return (\r\n        <TodoStateContext.Provider value={state}>\r\n            <TodoDispatchContext.Provider value={dispatch}>\r\n                <TodoNextIdContext.Provider value={nextId}>\r\n                {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useTodoState(){\r\n    return useContext(TodoStateContext);\r\n}\r\nexport function useTodoDispatch(){\r\n    return useContext(TodoDispatchContext);\r\n}\r\nexport function useTodoNextId(){\r\n    return useContext(TodoNextIdContext);\r\n}\r\n","/*\r\n    TodoHead.js\r\n    오늘의 날짜, 요일, 남은 할일의 개수\r\n*/\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n    padding-top: 48px;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 24px;\r\n    border-bottom: 1px solid #e9ecef;\r\n\r\n    h1 {\r\n        margin: 0;\r\n        font-size: 36px;\r\n        color: #343a40;\r\n    }\r\n    .day {\r\n        margin-top: 4px;\r\n        color: #868e96;\r\n        font-size: 21px;\r\n    }\r\n    .tasks-left {\r\n        color: #20c997;\r\n        font-size: 18px;\r\n        margin-top: 40px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nfunction TodoHead(){\r\n    const todos = useTodoState();\r\n    // console.log(todos);\r\n    const undoneTasks = todos.filter(todo => !todo.done);\r\n\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: \"numeric\"\r\n    });\r\n    const dayName = today.toLocaleDateString('ko-KR', {weekday: 'long'});\r\n\r\n    return (\r\n        <TodoHeadBlock>\r\n            <h1>{ dateString }</h1>\r\n            <div className=\"day\">{ dayName }</div>\r\n            <div className=\"tasks-left\">할일 {undoneTasks.length}개 남음</div>\r\n        </TodoHeadBlock>\r\n    )\r\n}\r\n\r\nexport default TodoHead;","/*\r\n    TodoItem.js\r\n    각 할 일 항목들을 보여주는 컨퍼넌트\r\n*/\r\nimport React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete, MdDeveloperMode } from 'react-icons/md';\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\nconst Remove = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e5;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n    display: none;\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    &:hover {\r\n        ${Remove} {\r\n            display: initial;\r\n        }\r\n    }\r\n`;\r\n\r\nconst CheckCircle = styled.div`\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 16px;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n    cursor: pointer;\r\n    ${props =>\r\n        props.done &&\r\n        css`\r\n            border: 1px solid #38d9a9;\r\n            color: #38d9a9;\r\n        `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n    ${props =>\r\n        props.done &&\r\n        css`\r\n        color: #ced4da;  \r\n    `}\r\n`;\r\n\r\nfunction TodoItem({id, done, text}){\r\n\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () => dispatch({ type: 'TOGGLE', id });\r\n    const onRemove = () => dispatch({ type: 'REMOVE', id });\r\n    \r\n\r\n    return (\r\n        <TodoItemBlock>\r\n            <CheckCircle done={done} onClick={onToggle}>{done && <MdDone/>}</CheckCircle>\r\n            <Text done={done}>{text}</Text>\r\n            <Remove onClick={onRemove}>\r\n                <MdDelete/>\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoItem);","/*\r\n    TodoList.js\r\n    여러개의 할 일 항목을 보여줄 리스트\r\n*/\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n    flex: 1;\r\n    padding: 20px 32px;\r\n    padding-bottom: 48px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nfunction TodoList(){\r\n    const todos = useTodoState();\r\n    return (\r\n        <TodoListBlock>\r\n            {todos.map(todo => (\r\n                <TodoItem\r\n                    key={todo.id}\r\n                    id={todo.id}\r\n                    text={todo.text}\r\n                    done={todo.done}\r\n                />\r\n            ))}\r\n        </TodoListBlock>\r\n    )\r\n}\r\n\r\nexport default TodoList;","/*\r\n    TodoCreate.js\r\n    새로운 항목을 등록 할 수 있는 컴포넌트\r\n*/\r\nimport React, { useState } from 'react';\r\nimport styled, {css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover {\r\n        background: #63e6be;\r\n    }\r\n    &:active {\r\n        background: #20c997;\r\n    }\r\n\r\n    z-index: 5;\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 60px;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0px;\r\n    transform: translate(-50%, 50%);\r\n    color: white;\r\n    border-radius: 50%;\r\n    border: none;\r\n    outline: none;\r\n    display: flex;\r\n\r\n    transition: 0.125s all ease-in;\r\n    ${props =>\r\n        props.open && \r\n            css`\r\n                background: #ff6b6b;\r\n                &:hover {\r\n                    background: #ff8787;\r\n                }\r\n                &:active {\r\n                    background: #fa5252;\r\n                }\r\n                transform: translate(-50%, 50%) rotate(45deg);\r\n            `}\r\n    `;\r\n\r\n    const InsertFormPositioner = styled.div`\r\n                width: 100%;\r\n                bottom: 0;\r\n                left: 0;\r\n                position: absolute;\r\n    `;\r\n\r\n    const InsertForm = styled.form`\r\n                background: #f8f9fa;\r\n                padding-left: 32px;\r\n                padding-top: 32px;\r\n                padding-right: 32px;\r\n                padding-bottom: 72px;\r\n\r\n                border-bottom-left-radius: 16px;\r\n                border-bottom-right-radius: 16px;\r\n                border-top: 1px solid #e9ecef;\r\n    `;\r\n\r\n    const Input = styled.input`\r\n                padding: 12px;\r\n                border-radius: 4px;\r\n                border: 1px solid #dee2e6;\r\n                width: 100%;\r\n                outline: none;\r\n                font-size: 18px;\r\n                box-sizing: border-box;\r\n    `;\r\n\r\n    function TodoCreate(){\r\n        const [open, setOpen] = useState(false);\r\n        const [value, setValue] = useState('');\r\n\r\n        const dispatch = useTodoDispatch();\r\n        const nextId = useTodoNextId();\r\n\r\n        const onToggle = () => setOpen(!open);\r\n        const onChange = e => setValue(e.target.value);\r\n        const onSubmit = e => {\r\n            e.preventDefault();\r\n            dispatch({\r\n                type: 'CREATE',\r\n                todo: {\r\n                    id: nextId.current,\r\n                    text: value,\r\n                    done: false\r\n                }\r\n            });\r\n            setValue('');\r\n            setOpen(false);\r\n            nextId.current += 1;\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {open && (\r\n                    <InsertFormPositioner>\r\n                        <InsertForm onSubmit={onSubmit}>\r\n                            <Input autoFocus placeholder=\"할 일을 입력 후, Enter를 누르세요.\"\r\n                            onChange={onChange}\r\n                            value={value}\r\n                            />\r\n                        </InsertForm>\r\n                    </InsertFormPositioner>\r\n                )}\r\n                <CircleButton onClick={onToggle} open={open}>\r\n                    <MdAdd/>\r\n                </CircleButton>\r\n            </>\r\n        );\r\n    }\r\n\r\nexport default React.memo(TodoCreate);\r\n","import React from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport TodoTemplate from './components/TodoTemplate';\r\nimport TodoHead from './components/TodoHead';\r\nimport TodoList from './components/TodoList';\r\nimport TodoCreate from './components/TodoCreate';\r\nimport { TodoProvider } from './TodoContext';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background: #e9ecef;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <TodoProvider>\r\n      <GlobalStyle/>\r\n      <TodoTemplate>\r\n        <TodoHead/>\r\n        <TodoList/>\r\n        <TodoCreate/>\r\n      </TodoTemplate>\r\n      </TodoProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}